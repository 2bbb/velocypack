* beat rapidjson!

* JasonValue, JasonArray, JasonObject c++ access

* handle numbers that cannot be represented safely in int64/uint64/double in JasonParser (JS)

* add tests with numeric values +inf, -inf, NaN, INT64_MAX, INT64_MIN etc. (JS)

* finish implementation of JasonSlice for all types (JS)

* handle unsupported JSON types in JasonDumper (JS)

* implement BCD in Builder, Slice, Parser and Dumper

* implement optional lookup table support in Builder, Slice, Parser and Dumper

* test long variants (presumably just use > 255 entries)

* test arrays/objects with few but long elements that exceed 64 KB

* support modification of Jason objects

* optional: support accessing arbitrary objects via JSONPointer etc.

* optional: support for other input encodings (e.g. UTF-16)

* optional: add SSE4 optimization for whitespace parsing (borrow from rapidjson)
